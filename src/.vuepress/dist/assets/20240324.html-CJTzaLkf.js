import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-BpYyui68.js";const t={},p=e(`<blockquote><p>好久没更新博客了! 前段时间我突然来了兴致,把博客的后端彻底翻新了一遍。现在用的是一个比较新的博客框架,界面看着还挺养眼的。昨天看到一个很有意思的话题，怎么简化一大堆判断？所以准备写这个博客简单讨论一下。</p></blockquote><p><strong>写在前面</strong></p><p>昨天我和薏米看了动画片《Coco》，中文是《寻梦环游记》,看完后感触颇深。片中的一个观点让我印象深刻:一个人的死亡并不意味着真正的消失,因为ta的灵魂会到达另一个世界。作为一个搞科研的,我当然明白这种说法缺乏依据。但更让我感到惋惜的是,一个人离世后,在人间可能就没几个人会记得ta了。我忽然想到,对于上一辈,特别是更早以前的老人们来说,受限于时代,他们在世时留下的痕迹可能寥寥无几,最多是些家中为数不多的遗物。像我对爷爷的印象已经相当模糊,对太爷就基本只能从父亲的只言片语中拼凑些许。那个年代,很多人连张像样的照片都没机会留下。</p><p>我们这个时代就幸运的多，有了互联网很多人可以写点东西。如果那个公司不倒闭，那么数据就永远存下来了。更不用说github的北极代码库平台。未来会不会有人看不知道，AI应该能读好几遍 😏 反正我的代码也在里面。</p><p>总之, 我下定决心要重新开始写博客。除了想着给后人留下点啥,主要是想借此机会更新一下自己的生活状态。</p><h2 id="代码中的if" tabindex="-1"><a class="header-anchor" href="#代码中的if"><span>代码中的if</span></a></h2><p>在Python中,<code>if</code>语句是最基本的条件控制结构。它允许我们根据某个条件来决定是否执行某段代码。如果条件为真,那么<code>if</code>下面的代码块就会被执行;如果条件为假,那么<code>if</code>下面的代码块就会被跳过。除了<code>if</code>,还有<code>elif</code>(相当于其他语言中的<code>else if</code>)和<code>else</code>,它们可以用来处理多个条件。当有多个条件需要检查时,我们可以使用一连串的<code>if-elif-else</code>语句。Python中的条件表达式不需要用括号括起来,而且也不需要用大括号来表示代码块,而是使用缩进来表示代码块的开始和结束。这是Python的一个独特的语法特点。</p><p>除了<code>if</code>语句,Python还支持三元表达式,也叫条件表达式。三元表达式可以让我们在一行代码中根据某个条件来决定一个值。它的语法是<code>value_if_true if condition else value_if_false</code>。也就是说,如果<code>condition</code>为真,就返回<code>value_if_true</code>,否则返回<code>value_if_false</code>。三元表达式可以使代码更加简洁,特别是在需要根据条件来设置变量值的时候。</p><h2 id="大佬不用else" tabindex="-1"><a class="header-anchor" href="#大佬不用else"><span>大佬不用else？</span></a></h2><p>我忘了在哪里看到了文章说一些大的公司非常不希望程序员在写code的时候用else，不知道这是因为什么考虑的但是反正自从看到那篇文章之后，我写代码就不用else了。但是不用else总得表示判断吧，那很简单，就用continue呗。</p><p>比如，我们要在一个列表中找到第一个偶数，如果用<code>if-else</code>，代码可能会是这样的：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> num <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>
    <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;第一个偶数是：</span><span class="token interpolation"><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是如果不用<code>else</code>，我们可以这样写：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> num <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>
    <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;第一个偶数是：</span><span class="token interpolation"><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们先判断数字是否不是偶数，如果不是偶数，就用<code>continue</code>跳过当前循环，继续下一次循环。如果是偶数，就打印出来，然后用<code>break</code>跳出整个循环。</p><p>这样写的好处是，代码的&quot;正向逻辑&quot;更清晰，我们关注的是&quot;找到偶数&quot;这个条件，而不是&quot;不是偶数&quot;这个条件。虽然这个例子很简单，但在更复杂的情况下，避免使用<code>else</code>可以让代码的逻辑更清晰，更容易理解和维护。</p><h2 id="如何解决很多if一起用" tabindex="-1"><a class="header-anchor" href="#如何解决很多if一起用"><span>如何解决很多if一起用？</span></a></h2><p>你写代码的时候，是不是经常会用到很多很多的<code>if</code>语句啊？比如说，你要判断用户的年龄，然后给他分个组什么的：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">set_age_group</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> age <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">:</span>
        age_group <span class="token operator">=</span> <span class="token string">&#39;学龄前儿童&#39;</span>
    <span class="token keyword">elif</span> age <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">:</span>
        age_group <span class="token operator">=</span> <span class="token string">&#39;儿童&#39;</span>
    <span class="token keyword">elif</span> age <span class="token operator">&lt;=</span> <span class="token number">18</span><span class="token punctuation">:</span>
        age_group <span class="token operator">=</span> <span class="token string">&#39;青少年&#39;</span>
    <span class="token keyword">elif</span> age <span class="token operator">&lt;=</span> <span class="token number">60</span><span class="token punctuation">:</span>
        age_group <span class="token operator">=</span> <span class="token string">&#39;成年人&#39;</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        age_group <span class="token operator">=</span> <span class="token string">&#39;老年人&#39;</span>
    
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;此人属于</span><span class="token interpolation"><span class="token punctuation">{</span>age_group<span class="token punctuation">}</span></span><span class="token string">。&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来挺简单的，对吧？但是你有没有发现，这里面有好多重复的代码啊，比如都是在判断<code>age</code>，然后给<code>ageGroup</code>赋值。</p><h3 id="switch大法好" tabindex="-1"><a class="header-anchor" href="#switch大法好"><span>Switch大法好！</span></a></h3><figure><img src="https://pic.atlasbioinfo.com/-f3oteq6ESt" alt="开玩笑的，不是这个switch" tabindex="0" loading="lazy"><figcaption>开玩笑的，不是这个switch</figcaption></figure><p>这时候呢，有些语言，比如javascript，你可以用<code>switch</code>来改写一下，类似：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">setAgeGroup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ageGroup <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> age <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token operator">:</span>
            ageGroup <span class="token operator">=</span> <span class="token string">&#39;学龄前儿童&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> age <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token operator">:</span> 
            ageGroup <span class="token operator">=</span> <span class="token string">&#39;儿童&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> age <span class="token operator">&lt;=</span> <span class="token number">18</span><span class="token operator">:</span>
            ageGroup <span class="token operator">=</span> <span class="token string">&#39;青少年&#39;</span><span class="token punctuation">;</span> 
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> age <span class="token operator">&lt;=</span> <span class="token number">60</span><span class="token operator">:</span>
            ageGroup <span class="token operator">=</span> <span class="token string">&#39;成年人&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            ageGroup <span class="token operator">=</span> <span class="token string">&#39;老年人&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">此人属于</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ageGroup<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">。</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是好一点了？</p><p>然而，一些语言，比如python里面是没有switch的，怎么办呢？</p><h3 id="查表才是王道" tabindex="-1"><a class="header-anchor" href="#查表才是王道"><span>查表才是王道！</span></a></h3><p>其实啊，我们可以把这些判断条件和结果都放到一个dict里面，像这样：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">set_age_group</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>
    age_groups <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token number">6</span><span class="token punctuation">:</span> <span class="token string">&#39;学龄前儿童&#39;</span><span class="token punctuation">,</span>
        <span class="token number">12</span><span class="token punctuation">:</span> <span class="token string">&#39;儿童&#39;</span><span class="token punctuation">,</span>
        <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">&#39;青少年&#39;</span><span class="token punctuation">,</span>
        <span class="token number">60</span><span class="token punctuation">:</span> <span class="token string">&#39;成年人&#39;</span><span class="token punctuation">,</span>
        <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;inf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">&#39;老年人&#39;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span> max_age<span class="token punctuation">,</span> group <span class="token keyword">in</span> age_groups<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> age <span class="token operator">&lt;=</span> max_age<span class="token punctuation">:</span>
            age_group <span class="token operator">=</span> group
            <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            age_group<span class="token operator">=</span><span class="token string">&#39;老年人&#39;</span>
    
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;此人属于</span><span class="token interpolation"><span class="token punctuation">{</span>age_group<span class="token punctuation">}</span></span><span class="token string">。&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，代码是不是简洁了很多？</p><h2 id="总结一下" tabindex="-1"><a class="header-anchor" href="#总结一下"><span>总结一下</span></a></h2><p>所以啊，下次你写代码的时候，如果发现自己用了很多<code>if</code>语句，不妨停下来想一想，是不是可以用其他的方式来改写一下呢？比如用<code>switch</code>，或者是查找表之类的。这样会让你的代码更简洁，更易读，也更容易维护！</p><p>好啦，今天就讲到这里。希望对你有帮助！</p>`,33),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","20240324.html.vue"]]),k=JSON.parse('{"path":"/posts/Python/20240324.html","title":"生信中的Python——如何处理一大堆判断？","lang":"zh-CN","frontmatter":{"icon":"print","date":"2024-03-24T00:00:00.000Z","title":"生信中的Python——如何处理一大堆判断？","categories":["Python"],"description":"好久没更新博客了! 前段时间我突然来了兴致,把博客的后端彻底翻新了一遍。现在用的是一个比较新的博客框架,界面看着还挺养眼的。昨天看到一个很有意思的话题，怎么简化一大堆判断？所以准备写这个博客简单讨论一下。 写在前面 昨天我和薏米看了动画片《Coco》，中文是《寻梦环游记》,看完后感触颇深。片中的一个观点让我印象深刻:一个人的死亡并不意味着真正的消失,因...","head":[["meta",{"property":"og:url","content":"https://blog.atlasbioinfo.com/posts/Python/20240324.html"}],["meta",{"property":"og:site_name","content":"ATLAS生物信息博客"}],["meta",{"property":"og:title","content":"生信中的Python——如何处理一大堆判断？"}],["meta",{"property":"og:description","content":"好久没更新博客了! 前段时间我突然来了兴致,把博客的后端彻底翻新了一遍。现在用的是一个比较新的博客框架,界面看着还挺养眼的。昨天看到一个很有意思的话题，怎么简化一大堆判断？所以准备写这个博客简单讨论一下。 写在前面 昨天我和薏米看了动画片《Coco》，中文是《寻梦环游记》,看完后感触颇深。片中的一个观点让我印象深刻:一个人的死亡并不意味着真正的消失,因..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic.atlasbioinfo.com/-f3oteq6ESt"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-24T16:07:31.000Z"}],["meta",{"property":"article:author","content":"Haopeng Yu"}],["meta",{"property":"article:published_time","content":"2024-03-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-24T16:07:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生信中的Python——如何处理一大堆判断？\\",\\"image\\":[\\"https://pic.atlasbioinfo.com/-f3oteq6ESt\\"],\\"datePublished\\":\\"2024-03-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-24T16:07:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Haopeng Yu\\",\\"url\\":\\"https://github.com/atlasbioinfo\\"}]}"]]},"headers":[{"level":2,"title":"代码中的if","slug":"代码中的if","link":"#代码中的if","children":[]},{"level":2,"title":"大佬不用else？","slug":"大佬不用else","link":"#大佬不用else","children":[]},{"level":2,"title":"如何解决很多if一起用？","slug":"如何解决很多if一起用","link":"#如何解决很多if一起用","children":[{"level":3,"title":"Switch大法好！","slug":"switch大法好","link":"#switch大法好","children":[]},{"level":3,"title":"查表才是王道！","slug":"查表才是王道","link":"#查表才是王道","children":[]}]},{"level":2,"title":"总结一下","slug":"总结一下","link":"#总结一下","children":[]}],"git":{"createdTime":1711296451000,"updatedTime":1711296451000,"contributors":[{"name":"hyu","email":"hp.yu@outlook.com","commits":1}]},"readingTime":{"minutes":5.36,"words":1607},"filePathRelative":"posts/Python/20240324.md","localizedDate":"2024年3月24日","excerpt":"<blockquote>\\n<p>好久没更新博客了! 前段时间我突然来了兴致,把博客的后端彻底翻新了一遍。现在用的是一个比较新的博客框架,界面看着还挺养眼的。昨天看到一个很有意思的话题，怎么简化一大堆判断？所以准备写这个博客简单讨论一下。</p>\\n</blockquote>\\n<p><strong>写在前面</strong></p>\\n<p>昨天我和薏米看了动画片《Coco》，中文是《寻梦环游记》,看完后感触颇深。片中的一个观点让我印象深刻:一个人的死亡并不意味着真正的消失,因为ta的灵魂会到达另一个世界。作为一个搞科研的,我当然明白这种说法缺乏依据。但更让我感到惋惜的是,一个人离世后,在人间可能就没几个人会记得ta了。我忽然想到,对于上一辈,特别是更早以前的老人们来说,受限于时代,他们在世时留下的痕迹可能寥寥无几,最多是些家中为数不多的遗物。像我对爷爷的印象已经相当模糊,对太爷就基本只能从父亲的只言片语中拼凑些许。那个年代,很多人连张像样的照片都没机会留下。</p>","autoDesc":true}');export{d as comp,k as data};
