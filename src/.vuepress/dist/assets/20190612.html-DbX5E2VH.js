import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as l,a as s,f as n,b as t,e}from"./app-BpYyui68.js";const c={},u=e(`<p>今年3月开学，我们组几个人坐在休息室拉家常。我说我去年可6了，从0开始做了一个可以预测基因编辑的网页。于是他们说，为啥做基因编辑，我们这几个做RNA结构的为啥不做个RNA结构的数据库呢？于是RSVdb计划就开始了。目前数据库已经完成，功能极其炫酷，我也从一个弱鸡全栈工程师硬是被活活逼成了凑活能上的全栈工程师。在此把建站全流程和技术给大家分享一下。</p><blockquote><ul><li>什么是Flask，怎么学</li><li>后端</li><li>前端</li></ul></blockquote><hr><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>20210911更新
刚部署了新的服务器，还是觉得flask+uwsgi+nginx的组合还是不错的；
SQLite数据库很方便，但是效率太低，建议换成mySQL或者mariaDB，推荐后者；
前端现在流行用框架，不再是直接写js或者jquery。
我用的是vue.js（主要是上手快），还有大佬们会推荐react框架，都可以试试；
个人感觉用框架之后就回不去jquery了...

最近我会再更新一个博客，下文就不更新了
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是flask-怎么学" tabindex="-1"><a class="header-anchor" href="#什么是flask-怎么学"><span>什么是Flask，怎么学</span></a></h2><p>我们底层用<strong>Flask</strong>架构。Flask是一款轻量级的web框架，Python写的，也是基于Python的WSGI做的。所以很多大佬都在讨论那些说Flask好的人是不是大部分都在说WSGI做的好=-=大佬的世界我不懂。</p><p>我个人体会，这个架构号称轻量级，大概就是我用U盘一拷贝就可以把整个网站拷走，部署也很简单。并且因为都是用Python写的，所以我个人也比较熟悉，处理数据、调用本地命令都可以用Python完成也比较方便。总的来说就是，这个web架构不需要php，如果用SQLalchemy的话就不要MySQL，一切都比较方便：），不妨试试。</p>`,7),r={href:"http://greyli.com/",target:"_blank",rel:"noopener noreferrer"},d={href:"http://helloflask.com/tutorial/",target:"_blank",rel:"noopener noreferrer"},k={href:"http://helloflask.com/book",target:"_blank",rel:"noopener noreferrer"},m=e(`<p>之后可以参考Flask的官方教程（搜Flask就能看到），这个教程的快速入门的前半部分写的不错，我还跟着做了好多。之后的解释也很详细，然鹅对于当时初学的我确实看不懂，所以当时我就开始看李辉写的东西了。</p><h2 id="后端" tabindex="-1"><a class="header-anchor" href="#后端"><span>后端</span></a></h2><p>突然不知道该从哪说起了=-=，先来看张图，我们生产环境中后端的大概流程，也就是Flask+Uwsgi+Nginx作为后端。生产环境就是发布的环境，平时测试叫测试环境，只需要Flask。</p><figure><img src="https://taolab.nwsuaf.edu.cn/static/rsvdb/img/manual/3.png" alt="backend" tabindex="0" loading="lazy"><figcaption>backend</figcaption></figure><h3 id="flask环境的部署" tabindex="-1"><a class="header-anchor" href="#flask环境的部署"><span>Flask环境的部署</span></a></h3><p>分为测试和正式发布。上图是正式发布的时候，平时测试相对简单。</p><p>Flask的安装在虚拟环境中的，我用的是<strong>pipenv</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pipenv
pipenv <span class="token function">install</span>
<span class="token comment">#运行的时候</span>
pipenv shell
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虚拟环境启动之后，安装Flask和相关软件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pipenv <span class="token function">install</span> flask python-dotenv flask-sqlalchemy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>dotenv</strong>是用来配置环境变量的。一般环境变量中会储存App的名字，数据库密码等，不用这个似乎也可以。</p><p><strong>SQLalchemy</strong>是Flask默认的数据库管理。我觉得这个数据库的优势和MySQL相比就是，如果你的数据库不复杂，并且用户只是读取不录入，SQLalchemy的效果就挺好的。并且，用Python操作的，也比较方便。</p><p>安装配置好后，每次运行只需要进入虚拟环境，之后</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>flask run
<span class="token comment">#或者</span>
python run.py
<span class="token comment">#run.py下文提到</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就可以在本地环境的5000端口，也就是127.0.0.1:5000访问到你的网站了。当然，你一个空文件夹是跑不起来的=-=，至少写个<strong>run.py</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Hello World!&#39;</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他的不多说了，大家好好看教程了。</p><h4 id="flask网站目录文件存放" tabindex="-1"><a class="header-anchor" href="#flask网站目录文件存放"><span>Flask网站目录文件存放</span></a></h4><p>我再说一下Flask文件的存放。似乎网上有两种风格，第一种为：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#以下的中午名字仅为解释，实际似乎不能用中文名</span>
-一个文件夹/
--webname/（你网站app的名字，我们的叫taolab<span class="token punctuation">)</span>

---template<span class="token punctuation">(</span>存放网页模板html<span class="token punctuation">)</span>/
----网站1/
-----index.html
----网站2/

---static<span class="token punctuation">(</span>存放静态文件js、css、img等<span class="token punctuation">)</span>/
----网站1/
-----js/
-----css/
----网站2/

---blueprints（蓝本文件）/
----__ini__.py （把blueprints作为一个python包，这里面不用写啥）
----网站1.py （网站1的路由写在这里）
----网站2.py

---__ini__.py （启动网站的设置，比如导入蓝本，网站设置，启动数据库等）
---command.py （可以不写。Flask可以自定义一些命令，方便运维和管理）
---setting.py （网站和数据库的设置，再比如是否启用测试环境还是生成环境等等）
---model.py <span class="token punctuation">(</span>定义数据库模型<span class="token punctuation">)</span>
---extensions.py （引入的flask扩展，比如SQLalchemy）

<span class="token comment">#和网站文件夹同一目录下</span>
<span class="token parameter variable">--wsgi.py</span> （把网站认为是一个python包，导入包，启动网站）
--.flaskenv （环境变量）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个简单说就是，每个子网站都作为子文件夹存放在static，template等里面。还有一种就是，每个子网站一个文件夹，里面放static，template等。我现在用的是上面这种。</p><h4 id="什么是蓝本" tabindex="-1"><a class="header-anchor" href="#什么是蓝本"><span>什么是蓝本</span></a></h4><p>上面提到的蓝本，我简单说一下。其实在我看来就是把子网站的路由分开了。也就是理论上所有网站都可以写在一起，比如在/intro域名跳转到个人简介，在/blog页面跳转到个人博客（我说的不是子网页而是子网站），这两个可以写在一起的，也就是：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/intro/&quot;</span><span class="token punctuation">)</span><span class="token comment">#子网站1，intro，个人简介（假设）</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/intro/index&quot;</span><span class="token punctuation">)</span> <span class="token comment">#注册两个路由，也就是无论访问intro还是，intro/index都可以到主页页面</span>
<span class="token keyword">def</span> <span class="token function">showIntroIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   render_template<span class="token punctuation">(</span><span class="token string">&#39;intro/index.html&#39;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/intro/labintro&quot;</span><span class="token punctuation">)</span><span class="token comment">#假设intro有个子页面，叫labintro</span>
<span class="token keyword">def</span> <span class="token function">showIntroIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   render_template<span class="token punctuation">(</span><span class="token string">&#39;intro/labintro.html&#39;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/blog/&quot;</span><span class="token punctuation">)</span><span class="token comment">#子网站2，blog</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/blog/index&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">showBlogIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   render_template<span class="token punctuation">(</span><span class="token string">&#39;blog/index.html&#39;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/blog/photoblog&quot;</span><span class="token punctuation">)</span><span class="token comment">#假设blog有个子页面，叫photoblog</span>
<span class="token keyword">def</span> <span class="token function">showIntroIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   render_template<span class="token punctuation">(</span><span class="token string">&#39;intro/photo.html&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以写到一起，然鹅问题就是，如果网站很多比如我这次做的在主网站中有5个子网站，每个子网站有5-10不等的子页面，这么写就很混乱（总的来说就是，大佬说这么写虽然方便很混乱，高手都用Blueprint，所以我也用）。所以分开了就在主网页中注册蓝本：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> app<span class="token punctuation">.</span>blueprints<span class="token punctuation">.</span>intro <span class="token keyword">import</span> intro <span class="token comment">#蓝本名叫intro.py</span>
<span class="token keyword">from</span> app<span class="token punctuation">.</span>blueprints<span class="token punctuation">.</span>blog <span class="token keyword">import</span> blog <span class="token comment">#蓝本名叫intro.py</span>
app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>intro<span class="token punctuation">,</span> url_prefix<span class="token operator">=</span><span class="token string">&#39;/intro&#39;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>blog<span class="token punctuation">,</span> url_prefix<span class="token operator">=</span><span class="token string">&#39;/blog&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后建立蓝本文件夹，里面有Intro.py, blog.py，把路由分开</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token punctuation">,</span> Blueprint
intro <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">&quot;intro&quot;</span><span class="token punctuation">,</span> __name__<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@intro<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@intro<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">showIntroIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   render_template<span class="token punctuation">(</span><span class="token string">&#39;intro/index.html&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这么弄，看起来整齐多了=-=。</p><h3 id="orm数据库" tabindex="-1"><a class="header-anchor" href="#orm数据库"><span>ORM数据库</span></a></h3><p>数据库管理我们用的是SQLalchemy。他是一种ORM数据库。ORM和其他数据库有啥区别自行百度。</p><p>这个数据库定义挺简单的，就用python写个类就行了：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Species</span><span class="token punctuation">(</span>rdb<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#__tablename__ =&#39;species&#39;</span>
    <span class="token comment">#上面的表名不用自己定义就默认为把class中的名字小写了</span>
    <span class="token builtin">id</span><span class="token operator">=</span>rdb<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>rdb<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name<span class="token operator">=</span>rdb<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>rdb<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#unique为唯一，index为索引</span>
    gename<span class="token operator">=</span>rdb<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>rdb<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    geo<span class="token operator">=</span>rdb<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>rdb<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一个叫species的表就定义好了。</p><p>查询的话就是：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tquery<span class="token operator">=</span>Species<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;Yeast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#或者功能更强大的filter</span>
tquery<span class="token operator">=</span>Species<span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Species<span class="token punctuation">.</span>name<span class="token operator">==</span><span class="token string">&quot;Yeast&quot;</span><span class="token punctuation">,</span> Species<span class="token punctuation">.</span>gename<span class="token punctuation">.</span>ilike<span class="token punctuation">(</span><span class="token string">&quot;%ea%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#上面的ilike就是包含“ea”这两个字符。all()就是所有查询结果，first（）就是第一个查询结果。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增删改查自行搜索；定义表和表间的一对多，多对一等关系，自行查看SQLalchemy的官方文档。</p><h3 id="上线的一些部署和经验" tabindex="-1"><a class="header-anchor" href="#上线的一些部署和经验"><span>上线的一些部署和经验</span></a></h3>`,38),v={href:"https://github.com/greyli/watchlist",target:"_blank",rel:"noopener noreferrer"},b=e(`<p>之后到了上线过程。我用的是学校网教中心的服务器，所以外围的安全不需要我们操心。内网我们都是堡垒机登陆之后操作，也更安全。</p><p>如果自己上线到服务器，就不能flask run了。需要用uWSGI和NGINX。uWSGI监听本地端口，操控链接flask，Nginx负责和外网通信处理请求，为啥要弄这两步？其实只用uWSGI理论也可以，然而NGINX是经过众多网站考验的，稳定性没得说，所以这俩配合比较好。当然，最后log也是双份的，定时清理就好了。遇到攻击nginx可以设置黑名单什么的。</p><h4 id="uwsgi配置" tabindex="-1"><a class="header-anchor" href="#uwsgi配置"><span>uWSGI配置</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token punctuation">[</span>uwsgi<span class="token punctuation">]</span>
socket <span class="token operator">=</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span>xxxx
<span class="token comment">#(写上负责通讯的本地端口)</span>
chdir <span class="token operator">=</span> 网站目录
home <span class="token operator">=</span> 虚拟环境目录
<span class="token comment">#这两个目录写绝对路径</span>
<span class="token comment">#虚拟环境地址需要根据pipenv install之后的地址更改</span>
<span class="token builtin">callable</span> <span class="token operator">=</span> app
<span class="token comment">#wsgi文件中app的名字</span>
wsgi<span class="token operator">-</span><span class="token builtin">file</span> <span class="token operator">=</span> wsgi<span class="token punctuation">.</span>py
<span class="token comment">#（你的wsgi文件）！！注意是相对路径</span>
processes <span class="token operator">=</span> <span class="token number">2</span>
threads <span class="token operator">=</span> <span class="token number">2</span>
stats <span class="token operator">=</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span>xxxx
<span class="token comment">#负责监听log的端口</span>
daemonize <span class="token operator">=</span> uwsgi<span class="token punctuation">.</span>log
<span class="token comment">#储存网站log的文件名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="wsgi-py的配置" tabindex="-1"><a class="header-anchor" href="#wsgi-py的配置"><span>WSGI.py的配置</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">from</span> dotenv <span class="token keyword">import</span> load_dotenv

dotenv_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;.env&#39;</span><span class="token punctuation">)</span>
<span class="token comment">#一般如果安装dotenv，会默认搜索.flaskenv里面的信息</span>
<span class="token comment">#但是生成环境需要明确的定义，因此手动载入env</span>
<span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dotenv_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    load_dotenv<span class="token punctuation">(</span>dotenv_path<span class="token punctuation">)</span>

<span class="token keyword">from</span> taolab <span class="token keyword">import</span> create_app 

app <span class="token operator">=</span> create_app<span class="token punctuation">(</span><span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="env中的信息" tabindex="-1"><a class="header-anchor" href="#env中的信息"><span>env中的信息</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>FLASK_ENV<span class="token operator">=</span>production
FLASK_APP<span class="token operator">=</span>app
<span class="token comment">#上面写app名</span>
SECRET_KEY<span class="token operator">=</span><span class="token string">&#39;pJ********&#39;</span>
<span class="token comment">#数据库的密钥最好放在这里</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="nginx配置" tabindex="-1"><a class="header-anchor" href="#nginx配置"><span>nginx配置</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>     location / <span class="token punctuation">{</span>
			include        uwsgi_params<span class="token punctuation">;</span>
			uwsgi_pass     <span class="token number">127.0</span>.0.1:xxxxx<span class="token punctuation">;</span>
		  <span class="token comment">#和上面的uwsgi端口要写成一样的</span>
           <span class="token comment">#下面这3行似乎可以有可无，因为你include了uwsgi的配置</span>
			uwsgi_param UWSGI_PYHOME /www/wwwroot/taolab.nwsuaf.edu.cn/taolab<span class="token punctuation">;</span>
			uwsgi_param UWSGI_CHDIR /www/wwwroot/taolab.nwsuaf.edu.cn/taolab<span class="token punctuation">;</span>
			uwsgi_param UWSGI_SCRIPT wsgi:app<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是这些吧~</p><h2 id="前端" tabindex="-1"><a class="header-anchor" href="#前端"><span>前端</span></a></h2><p>前端其实没啥说的=-=，因为就是HTML5+CSS+JS嘛。所以，我说说Jinja2模板和前后端的通讯吧。</p><h3 id="jinja模板" tabindex="-1"><a class="header-anchor" href="#jinja模板"><span>Jinja模板</span></a></h3><p>是flask内置的模板渲染语言。“渲染”这次词，非常神乎其神，其实就是生成html代码。Jinja2有自己的一套语法，可以内置到html中，这样如果这个页面被访问了，首先jinja2读这个页面，遇到jinja2的语法相关代码就运行，把相应的html代码生成并替换到相应位置，之后再给用户。我举个例子啊：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!--
这个是我们生成按钮组，也就是一串botton的jinja2代码。
也就是，我们不需要写一大堆&lt;button&gt;&lt;/button&gt;什么的了，
用jinja2的循环for语句就可以把所有物种名称全部生成
spin是后端传来的物种参数，也就是显示哪个物种，所以用jinja2的if判断以下，加个active的类就可以高亮

jinja2的语法主要就是

\\{\\% 语句 \\%\\}
\\{\\{ 变量 \\}\\}

因为github.io用的也是jinja2模板，所以后面的我用\\注释了，实际没有这些\\
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn-group-vertical<span class="token punctuation">&quot;</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>group<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-default<span class="token punctuation">&quot;</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>disabled<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Species<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        \\{\\% for sp in spes \\%\\}
      	  	\\{\\% if sp==spin \\%\\}
        		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-default spbutt active<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{sp}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        	\\{\\% else \\%\\}
        		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-default spbutt<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{sp}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        	\\{\\% endif \\%\\}
        \\{\\% endfor \\%\\}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>flask可以给jinja2传参数，传变量，比如我现在要把物种做成变量传给模板</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@rsvdb<span class="token punctuation">.</span>context_processor</span>
<span class="token keyword">def</span> <span class="token function">imspecies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    spes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Arabidopsis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Drosophila&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E.coli&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;Human&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mouse&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Rice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Yeast&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Zebrafish&quot;</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>spes<span class="token operator">=</span>spes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般传数据就是在flask的render_template()中带参数，就传过去了。</p><h3 id="前后端通信" tabindex="-1"><a class="header-anchor" href="#前后端通信"><span>前后端通信</span></a></h3><p>刚才提到了Jinja2传数据，可以render_template()也就定义常量，用context_processor()。然鹅，我觉得这个方法传数据不好，和flash消息一样不好=-=。因为每次传完需要将页面重定向，也就是刷新，才能显示新数据展示的页面。可能针对不同需求可能有用吧，比如服务器提交之后页面不断刷新获得最新状态什么的（然鹅这个似乎用的是AJAX的长链接=-=）。总之，我觉得每次换点数据就刷新页面还是太夸张了。所以我用Jinja2模板主要是第一次把模板渲染好，之后通信都采用AJAX异步通讯完成。</p><p>AJAX是异步通讯的实现方法之一，吧。大概逻辑就算给后台发点请求，后端收到之后处理请求，再返回前端，直接更新在页面上，无需重新刷新。这样就方便多了：）</p><p>AJAX使用JS实现的，我举个jQuery的例子（jQuery写的代码少：））：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">showGenomeInfo</span><span class="token punctuation">(</span><span class="token parameter">genomename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/rsvdb/browse/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;med&quot;</span><span class="token operator">:</span> <span class="token string">&quot;genome&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;label&quot;</span><span class="token operator">:</span> genomename <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//返回数据为json格式，js可以直接用，假设传的是{&quot;genomeinfo&quot;:&#39;R62&#39;}这种</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#genomeinfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>genomeinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 收回数据之后更新表格中的一些值</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后台的python需要用到Flask里面的request，举个栗子：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token punctuation">,</span>jsonify
<span class="token decorator annotation punctuation">@rsvdb<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/browse/&quot;</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token keyword">def</span> <span class="token function">showDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#如果请求为POST</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token string">&#39;med&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;geoname&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#判断值里面有没有叫med的，它的值是不是genome</span>
            tgenomeinfo<span class="token operator">=</span>getGenomeInfo<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#调用某个方法获得genome的信息</span>
            <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>tgenomeinfo<span class="token punctuation">)</span><span class="token comment">#以json的格式返回数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话，用户体验会比较好。</p><h3 id="前端的其他杂事" tabindex="-1"><a class="header-anchor" href="#前端的其他杂事"><span>前端的其他杂事</span></a></h3><p>就是，不要重复造轮子啦。那些大佬的前端UI做的那么好，jQuery插件那么好，直接用就好了啊。有需求先Github一下，看看有没有轮子，不用总是手撸轮子。</p><figure><img src="https://pic.atlasbioinfo.com/logo.png" alt="博主简介" tabindex="0" loading="lazy"><figcaption>博主简介</figcaption></figure>`,30);function g(h,y){const a=o("ExternalLinkIcon");return i(),l("div",null,[u,s("p",null,[n("怎么学嘛？我是看李辉写的博客和书一路走过来的，几乎没看啥其他课程（当然也看来很多其他博客和百度到的资料）。可以看他的首页"),s("a",r,[n("李辉的博客 http://greyli.com/"),t(a)]),n(" ，他写的书也很不错，《"),s("a",d,[n("Flask 入门教程"),t(a)]),n("》和《"),s("a",k,[n("Flask Web 开发实战"),t(a)]),n("》，后者实验室有一本，对我帮助很大。真的不想做广告，但是他写的这个确实是我看到的最好的。")]),m,s("p",null,[n("其他后端的东西需要跟着教程走一遍都会了。建议自己先建个小网站，比如李辉做的初学者示例，一个显示电影名的watchlist "),s("a",v,[n("github链接"),t(a)]),n("。")]),b])}const q=p(c,[["render",g],["__file","20190612.html.vue"]]),x=JSON.parse('{"path":"/posts/Website/20190612.html","title":"Flask搭建生物学数据库全流程","lang":"zh-CN","frontmatter":{"icon":"chrome","date":"2019-06-12T00:00:00.000Z","title":"Flask搭建生物学数据库全流程","categories":["Website"],"description":"今年3月开学，我们组几个人坐在休息室拉家常。我说我去年可6了，从0开始做了一个可以预测基因编辑的网页。于是他们说，为啥做基因编辑，我们这几个做RNA结构的为啥不做个RNA结构的数据库呢？于是RSVdb计划就开始了。目前数据库已经完成，功能极其炫酷，我也从一个弱鸡全栈工程师硬是被活活逼成了凑活能上的全栈工程师。在此把建站全流程和技术给大家分享一下。 什么...","head":[["meta",{"property":"og:url","content":"https://blog.atlasbioinfo.com/posts/Website/20190612.html"}],["meta",{"property":"og:site_name","content":"ATLAS生物信息博客"}],["meta",{"property":"og:title","content":"Flask搭建生物学数据库全流程"}],["meta",{"property":"og:description","content":"今年3月开学，我们组几个人坐在休息室拉家常。我说我去年可6了，从0开始做了一个可以预测基因编辑的网页。于是他们说，为啥做基因编辑，我们这几个做RNA结构的为啥不做个RNA结构的数据库呢？于是RSVdb计划就开始了。目前数据库已经完成，功能极其炫酷，我也从一个弱鸡全栈工程师硬是被活活逼成了凑活能上的全栈工程师。在此把建站全流程和技术给大家分享一下。 什么..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://taolab.nwsuaf.edu.cn/static/rsvdb/img/manual/3.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T11:04:46.000Z"}],["meta",{"property":"article:author","content":"Haopeng Yu"}],["meta",{"property":"article:published_time","content":"2019-06-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-20T11:04:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Flask搭建生物学数据库全流程\\",\\"image\\":[\\"https://taolab.nwsuaf.edu.cn/static/rsvdb/img/manual/3.png\\",\\"https://pic.atlasbioinfo.com/logo.png\\"],\\"datePublished\\":\\"2019-06-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-20T11:04:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Haopeng Yu\\",\\"url\\":\\"https://github.com/atlasbioinfo\\"}]}"]]},"headers":[{"level":2,"title":"什么是Flask，怎么学","slug":"什么是flask-怎么学","link":"#什么是flask-怎么学","children":[]},{"level":2,"title":"后端","slug":"后端","link":"#后端","children":[{"level":3,"title":"Flask环境的部署","slug":"flask环境的部署","link":"#flask环境的部署","children":[]},{"level":3,"title":"ORM数据库","slug":"orm数据库","link":"#orm数据库","children":[]},{"level":3,"title":"上线的一些部署和经验","slug":"上线的一些部署和经验","link":"#上线的一些部署和经验","children":[]}]},{"level":2,"title":"前端","slug":"前端","link":"#前端","children":[{"level":3,"title":"Jinja模板","slug":"jinja模板","link":"#jinja模板","children":[]},{"level":3,"title":"前后端通信","slug":"前后端通信","link":"#前后端通信","children":[]},{"level":3,"title":"前端的其他杂事","slug":"前端的其他杂事","link":"#前端的其他杂事","children":[]}]}],"git":{"createdTime":1710932686000,"updatedTime":1710932686000,"contributors":[{"name":"hyu","email":"hp.yu@outlook.com","commits":1}]},"readingTime":{"minutes":11.43,"words":3430},"filePathRelative":"posts/Website/20190612.md","localizedDate":"2019年6月12日","excerpt":"<p>今年3月开学，我们组几个人坐在休息室拉家常。我说我去年可6了，从0开始做了一个可以预测基因编辑的网页。于是他们说，为啥做基因编辑，我们这几个做RNA结构的为啥不做个RNA结构的数据库呢？于是RSVdb计划就开始了。目前数据库已经完成，功能极其炫酷，我也从一个弱鸡全栈工程师硬是被活活逼成了凑活能上的全栈工程师。在此把建站全流程和技术给大家分享一下。</p>\\n<blockquote>\\n<ul>\\n<li>什么是Flask，怎么学</li>\\n<li>后端</li>\\n<li>前端</li>\\n</ul>\\n</blockquote>\\n<hr>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>20210911更新\\n刚部署了新的服务器，还是觉得flask+uwsgi+nginx的组合还是不错的；\\nSQLite数据库很方便，但是效率太低，建议换成mySQL或者mariaDB，推荐后者；\\n前端现在流行用框架，不再是直接写js或者jquery。\\n我用的是vue.js（主要是上手快），还有大佬们会推荐react框架，都可以试试；\\n个人感觉用框架之后就回不去jquery了...\\n\\n最近我会再更新一个博客，下文就不更新了\\n</code></pre></div>","autoDesc":true}');export{q as comp,x as data};
