import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-BpYyui68.js";const p={},e=t(`<p>此前写代码组织文件，我非常喜欢用TSV这种格式，也就是用Tab分隔，类似bed格式。因为这种格式在terminal里面显示比较整齐，某一列看起来很规整。csv格式相对来说直接看排版就很乱，再加上字符其实差不多，所以没怎么用。但是我最近发现TSV写文件对于缺失值可能会存在一定不好处理的bug。这个博客整理一下我发现的东西，之后看来需要多用CSV格式了。</p><blockquote><ul><li>TSV,BED和CSV</li><li>TSV的BUG</li><li>后记</li></ul></blockquote><hr><h3 id="tsv-bed和csv" tabindex="-1"><a class="header-anchor" href="#tsv-bed和csv"><span>TSV,BED和CSV</span></a></h3><p>TSV、bed 和 CSV 是三种常见的文本文件格式，用于存储表格数据。以下是这三种格式的区别：</p><ol><li><p><strong>TSV (Tab-Separated Values)</strong></p><ul><li>如其名所示，TSV 格式使用制表符（tab）作为字段之间的分隔符。</li><li>例如：<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>名字    年龄    地址
张三    25    北京
李四    30    上海
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>TSV 格式常用于某些程序，如 Excel 和数据库导入/导出功能，因为它们可以很好地处理包含逗号的数据。</li></ul></li><li><p><strong>bed (Browser Extensible Data)</strong></p><ul><li>bed 格式是一种用于描述基因组数据的文件格式，特别是在生物信息学中。</li><li>它通常包含至少三列：染色体名、起始位置和结束位置。但也可以包含更多的列，如名称、分数、链方向等。</li><li>例如：<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>chr1    100    200
chr1    150    250
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>注意：bed 格式的坐标是0-based和半开放的，这意味着起始位置是包括的，但结束位置是不包括的。</li></ul></li><li><p><strong>CSV (Comma-Separated Values)</strong></p><ul><li>CSV 格式使用逗号作为字段之间的分隔符。</li><li>例如：<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>名字,年龄,地址
张三,25,北京
李四,30,上海
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>CSV 是最常用的数据交换格式之一，特别是在数据分析和数据科学领域。</li><li>但是，如果数据本身包含逗号，那么这可能会导致混淆。为了解决这个问题，通常会使用双引号来包围包含逗号的字段。</li></ul></li></ol><p>总结：TSV 和 CSV 都是用于存储表格数据的通用格式，而 bed 格式特定于基因组数据。选择哪种格式取决于你的具体需求和你正在使用的工具。</p><h3 id="tsv的bug" tabindex="-1"><a class="header-anchor" href="#tsv的bug"><span>TSV的BUG</span></a></h3><p>我在处理一些有缺失值的数据发现TSV可能会漏掉最后的空行。下面是详细的展示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
a<span class="token operator">=</span><span class="token string">&quot;&quot;</span>
b<span class="token operator">=</span><span class="token string">&quot;2&quot;</span>
c<span class="token operator">=</span><span class="token string">&quot;3&quot;</span>
d<span class="token operator">=</span><span class="token string">&quot;&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

OUTPUT<span class="token punctuation">:</span>
	<span class="token number">2</span>	<span class="token number">3</span>	<span class="token comment"># 可以看到正常输出</span>
<span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">]</span> <span class="token comment"># 这是正常split</span>
<span class="token punctuation">[</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span> <span class="token comment">#如果习惯性加了strip()去空格就少了2个值</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面可以看到，直接join和split是没问题的，除非不小心加了strip。其实最大的bug在于读写文件：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a<span class="token operator">=</span><span class="token string">&quot;&quot;</span>
b<span class="token operator">=</span><span class="token string">&quot;2&quot;</span>
c<span class="token operator">=</span><span class="token string">&quot;3&quot;</span>
d<span class="token operator">=</span><span class="token string">&quot;&quot;</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>
    out<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


OUTPUT<span class="token punctuation">:</span>
<span class="token punctuation">[</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span> <span class="token comment">#一般读文件我们会习惯性加strip，于是首尾的缺失值就被删了</span>
<span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">]</span> <span class="token comment">#这个最夸张，就算不加strip，最后一个值也被trim掉了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果加strip，不用说缺失值就被删了。 不过不加strip，最后一个缺失值也被认为不存在。</p><p>因为通常BED格式要求对的很齐，所以某个值消失了就会错位，因为逻辑BUG。</p><h3 id="后记" tabindex="-1"><a class="header-anchor" href="#后记"><span>后记</span></a></h3>`,15),o=[e];function i(c,l){return s(),a("div",null,o)}const d=n(p,[["render",i],["__file","20230822.html.vue"]]),k=JSON.parse('{"path":"/posts/Bioinformatics/20230822.html","title":"从TSV换到CSV","lang":"zh-CN","frontmatter":{"icon":"laptop","date":"2023-08-22T00:00:00.000Z","title":"从TSV换到CSV","categories":["Bioinformatics"],"description":"此前写代码组织文件，我非常喜欢用TSV这种格式，也就是用Tab分隔，类似bed格式。因为这种格式在terminal里面显示比较整齐，某一列看起来很规整。csv格式相对来说直接看排版就很乱，再加上字符其实差不多，所以没怎么用。但是我最近发现TSV写文件对于缺失值可能会存在一定不好处理的bug。这个博客整理一下我发现的东西，之后看来需要多用CSV格式了。 ...","head":[["meta",{"property":"og:url","content":"https://blog.atlasbioinfo.com/posts/Bioinformatics/20230822.html"}],["meta",{"property":"og:site_name","content":"ATLAS生物信息博客"}],["meta",{"property":"og:title","content":"从TSV换到CSV"}],["meta",{"property":"og:description","content":"此前写代码组织文件，我非常喜欢用TSV这种格式，也就是用Tab分隔，类似bed格式。因为这种格式在terminal里面显示比较整齐，某一列看起来很规整。csv格式相对来说直接看排版就很乱，再加上字符其实差不多，所以没怎么用。但是我最近发现TSV写文件对于缺失值可能会存在一定不好处理的bug。这个博客整理一下我发现的东西，之后看来需要多用CSV格式了。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T11:04:46.000Z"}],["meta",{"property":"article:author","content":"Haopeng Yu"}],["meta",{"property":"article:published_time","content":"2023-08-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-20T11:04:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从TSV换到CSV\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-20T11:04:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Haopeng Yu\\",\\"url\\":\\"https://github.com/atlasbioinfo\\"}]}"]]},"headers":[{"level":3,"title":"TSV,BED和CSV","slug":"tsv-bed和csv","link":"#tsv-bed和csv","children":[]},{"level":3,"title":"TSV的BUG","slug":"tsv的bug","link":"#tsv的bug","children":[]},{"level":3,"title":"后记","slug":"后记","link":"#后记","children":[]}],"git":{"createdTime":1710932686000,"updatedTime":1710932686000,"contributors":[{"name":"hyu","email":"hp.yu@outlook.com","commits":1}]},"readingTime":{"minutes":2.96,"words":889},"filePathRelative":"posts/Bioinformatics/20230822.md","localizedDate":"2023年8月22日","excerpt":"<p>此前写代码组织文件，我非常喜欢用TSV这种格式，也就是用Tab分隔，类似bed格式。因为这种格式在terminal里面显示比较整齐，某一列看起来很规整。csv格式相对来说直接看排版就很乱，再加上字符其实差不多，所以没怎么用。但是我最近发现TSV写文件对于缺失值可能会存在一定不好处理的bug。这个博客整理一下我发现的东西，之后看来需要多用CSV格式了。</p>\\n<blockquote>\\n<ul>\\n<li>TSV,BED和CSV</li>\\n<li>TSV的BUG</li>\\n<li>后记</li>\\n</ul>\\n</blockquote>\\n<hr>\\n<h3>TSV,BED和CSV</h3>\\n<p>TSV、bed 和 CSV 是三种常见的文本文件格式，用于存储表格数据。以下是这三种格式的区别：</p>","autoDesc":true}');export{d as comp,k as data};
