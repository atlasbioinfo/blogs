import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,a as n,f as c,b as l,e as s}from"./app-BpYyui68.js";const i={},u=s(`<p>昨天组会后，和同门讲起曾经我刚进实验室的辛酸历程。2G内存的小服务器，硬是让我做人类基因组数据，于是写程序必须各种优化还得注意控制内存。所以有了今天的想法，聊聊怎么从基因组中提序列。实现的功能不重要，主要是讲一下怎么处理大文件，真正提序列可以用samtools等现有软件，不用重复造轮子。</p><blockquote><ul><li>问题描述</li><li>读取大文件</li><li>从简单的开始</li><li>Unittest单元测试</li></ul></blockquote><hr><p>写在前面：</p><p>有人给我打赏了！！！！</p><p>感谢感谢，希望我的内容对你们有帮助。我平时忙起来特别忙，闲起来特别闲=-=，如果有几个小时的空闲与其看个电影不如写写博客，自己也能学习一下。</p><hr><p>生信中还是需要处理一些大数据的，比如组学数据或者测序数据。一般需求就是需要看一下数据内容，定位某一行的内容，查找某个东西，或者逐行进行数据处理等等。</p><p>如果内存足够大，在算法合理的情况下，理论上不用考虑大文件处理，全部塞到内存里去任性就行；不过如果内存有限，那么就需要点策略了。这次我们先来讨论一个</p><h2 id="_1-问题描述" tabindex="-1"><a class="header-anchor" href="#_1-问题描述"><span>1. 问题描述</span></a></h2><p>假设有这么个应用场景：</p><p>有一个比较大的fasta文件，只有一个染色体，如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&gt;chr1A
ACATCGTAGCTAGCATCGGGGGGGGGGATGCATCGTACGTAGCTAGCTCATCGCGTGATG
CCGTACGTACGTAGCGCGCTCTAGCTCCGTAGCTAGCTAGCTAGTCGATCGTAGCTAGCT
....
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我现在需要提取以下序列要怎么办？</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#为gff3注释文件的部分列
chr1A   mRNA    130446  131722  -   ID=TRITD1Av1G000090.1 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-处理大文件的特定行" tabindex="-1"><a class="header-anchor" href="#_2-处理大文件的特定行"><span>2. 处理大文件的特定行</span></a></h2><p>python读文件一般是这么读的：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./demo.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>
s<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就相当于把demo.fa的全部内容全部放到内存(里面叫s的变量)。如果对于大文件这么搞就容易把服务器卡死。</p><p>python里面有几个方法都可以读大文件，比如with；</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#with的方法。</span>
<span class="token comment">#with会自带异常包，遇到问题抛出异常</span>
<span class="token comment">#同时，他会把文件变成迭代器，自动进行内存管理，这也是我最常用的方案。</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;demo.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>
        <span class="token comment">#处理line</span>

<span class="token comment"># 此外，还有：</span>
<span class="token comment"># read(size)将文件分块，循环readline()，直接用fileinput包，seek方法等。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有大佬推荐mmap包，感兴趣的可以试试。 不过这里，我们想对于fasta文件的某一行进行处理，2个策略：</p><ol><li>一行一行读，记录每行长度，到指定行停下来开始处理</li><li>直接跳到某一行</li></ol><p>如果你的fasta文件每行长度不同（通常是不可能的），那似乎只能用方法1了，或者linecache了解一下。</p><p>不过一般fasta格式的文件每行字符数是固定的，所以我们就用方法2，我们用f.seek这个函数。</p><p>那么开始写代码</p><h2 id="_3-从简单的开始" tabindex="-1"><a class="header-anchor" href="#_3-从简单的开始"><span>3. 从简单的开始</span></a></h2><p>首先需要做一个能用的东西：</p><blockquote><p>Atlas编程哲学：先能用，再谈别的<br> 为啥要写程序，不就是为了实现一个功能。没必要全部做好，先实现全部功能之后慢慢改。</p></blockquote><p>如果是我要做上面这个问题，首先我会先设计一个简单的测试文件（尽可能多的包含可能遇到的情况），实现我需要的全部功能后再上大基因组。</p><p>建一个叫<strong>test.fa</strong>的文件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&gt;test
AAACCCGAAA
AAAAAAAAAC
CGAAAACCCC
CCCCCCCCCC
CCCGAAAAC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再做一个叫<strong>test.gff</strong>的文件，则需要提取的序列为（最后一列为提取出的序列）</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>test    4   7   +   CCCG
test    20  22  +   CCG
test    27  44  +   CCCCCCCCCCCCCCCCCG
test    49  49  +   C
test    4   7   -   CGGG
test    20  22  -   GCC
test    27  44  -   CGGGGGGGGGGGGGGGGG
test    49  49  -   G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到测试文件中只有A,C,G，提取的是包含C和G的序列。如果是+，那么提取出来的序列C多G少，如果是-，提取出来是C少G多，这样方便判断。并且文件包含了内部、换行、头部等情况。</p><p>观察以下test.fa，第一行为title，之后每行都是10（除最后一行），所以首先我们想知道title那行的长度是多少：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
titleLen<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>titleLen<span class="token punctuation">)</span> 
<span class="token comment"># 输出6, &quot;&gt;test&quot;还有一个换行符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先测试第一个</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>beg<span class="token operator">=</span><span class="token number">4</span>
end<span class="token operator">=</span><span class="token number">7</span>
f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>titleLen<span class="token operator">+</span>beg<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#文件句柄移动到beg前一位</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>end<span class="token operator">-</span>beg<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#输出CCCG，成功!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里如果失败了，可能是因为你在win操作，文件结尾除了\\n还有\\r。可以先用某种方式（tr啊或者编辑器）去除\\r再进行下面的操作。</p></blockquote><p>再测试下一个(完整代码)：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
titleLen<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
beg<span class="token operator">=</span><span class="token number">20</span>
end<span class="token operator">=</span><span class="token number">22</span>
f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>titleLen<span class="token operator">+</span>beg<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>end<span class="token operator">-</span>beg<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#输出:</span>
<span class="token comment">#AC</span>
<span class="token comment">#</span>
<span class="token comment">#，不对了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为有换行符...beg这个值并不包括换行符，所以需要把beg修正一下。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
titleLen<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
lenline<span class="token operator">=</span><span class="token number">10</span> <span class="token comment">#每行碱基长度</span>
beg<span class="token operator">=</span><span class="token number">20</span>
end<span class="token operator">=</span><span class="token number">22</span>
sbeg<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>beg<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>lenline<span class="token punctuation">)</span>
f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>titleLen<span class="token operator">+</span>beg<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>sbeg<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>end<span class="token operator">-</span>beg<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>send<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#输出</span>
<span class="token comment">#CC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开头对了，看来还得再矫正一下end</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
titleLen<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
lenline<span class="token operator">=</span><span class="token number">10</span>
beg<span class="token operator">=</span><span class="token number">20</span>
end<span class="token operator">=</span><span class="token number">22</span>
sbeg<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>beg<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>lenline<span class="token punctuation">)</span>
send<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>lenline<span class="token punctuation">)</span><span class="token operator">-</span>sbeg
f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>titleLen<span class="token operator">+</span>beg<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>sbeg<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>end<span class="token operator">-</span>beg<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>send<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#输出CCG，对了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先不弄别的，我们把上面的打包成一个函数，那么完整的代码变成：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">getSeq</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>tlen<span class="token punctuation">,</span>lenline<span class="token punctuation">,</span>beg<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sbeg<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>beg<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>lenline<span class="token punctuation">)</span>
    send<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>lenline<span class="token punctuation">)</span><span class="token operator">-</span>sbeg
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>tlen<span class="token operator">+</span>beg<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>sbeg<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>end<span class="token operator">-</span>beg<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>send<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span> <span class="token comment">#如果是直接运行这个程序的话，运行以下代码。</span>
    f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
    titleLen<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    lenline<span class="token operator">=</span><span class="token number">10</span>
    beg<span class="token operator">=</span><span class="token number">4</span>
    end<span class="token operator">=</span><span class="token number">7</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>getSeq<span class="token punctuation">(</span>f<span class="token punctuation">,</span>titleLen<span class="token punctuation">,</span>lenline<span class="token punctuation">,</span>beg<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好啦，到一个小段落了。</p><p>那么我们为什么要封装成一个函数呢？</p><p>主要是为了代码的重用以及让主体代码看起来简洁一点。</p><p>重用就是，如果你以后想完成类似的功能，就把整个函数拷贝过去（或者导入），之后传入对应格式的参数，就可以得到想要的结果。</p><p>封装成一个一个的方法后，程序就变成了搭积木一般的存在。你只需要在你的主体中搭好一个个积木，处理好输入和输出就行了。</p><p>这样做其实还有一个好处，就是方便查bug。你可以用单元测试的方法测试每一个方法，如果方法没问题，那么就认为这一块代码是没问题的，就可以专注于其他块。</p><p>回顾一下，我们先测了一个简单的情况，实现了功能；之后发现这个代码不适用于第二种情况，于是大量修改了代码。那么问题来了，这个代码是否还支持我们的第一种情况呢？于是，unittest就出现了。</p><h2 id="_4-unittest单元测试" tabindex="-1"><a class="header-anchor" href="#_4-unittest单元测试"><span>4. Unittest单元测试</span></a></h2><p>什么是单元测试。</p><p>简单说就是，给个例子让程序的一部分跑一下，看看结果和预期的一样不。</p><p>那么我们就可以在单元测试中加入很多例子，每次修改代码后测试一下看曾经的例子还能通过不？</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> unittest
<span class="token keyword">from</span> get_seq <span class="token keyword">import</span> getSeq <span class="token comment">#之前的代码保存在get_seq.py里面</span>


<span class="token keyword">class</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
    titleLen<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    lenline<span class="token operator">=</span><span class="token number">10</span>
    
    <span class="token comment">#写了2个简单的test</span>
    <span class="token comment">#分别是上面的两个例子</span>
    <span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        beg<span class="token operator">=</span><span class="token number">4</span>
        end<span class="token operator">=</span><span class="token number">7</span>
        targetSeq<span class="token operator">=</span><span class="token string">&quot;CCCG&quot;</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>getSeq<span class="token punctuation">(</span>self<span class="token punctuation">.</span>f<span class="token punctuation">,</span>self<span class="token punctuation">.</span>titleLen<span class="token punctuation">,</span>self<span class="token punctuation">.</span>lenline<span class="token punctuation">,</span>beg<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">,</span>targetSeq<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#输出：</span>
<span class="token comment">#..</span>
<span class="token comment">#----------------------------------------------------------------------</span>
<span class="token comment">#Ran 2 tests in 0.001s</span>
<span class="token comment">#</span>
<span class="token comment">#OK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，unittest的方法很多，最后评价结果的方法也很多，大家可以详细看一下。这里给python官方说明的链接：</p>`,61),r={href:"https://docs.python.org/zh-cn/3/library/unittest.html",target:"_blank",rel:"noopener noreferrer"},k=s(`<p>最后，我们完善一下我们的程序：</p><p>首先，再写一个转义的函数，负责处理负链的情况</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>nt<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&quot;A&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;t&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;t&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;g&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;g&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;n&quot;</span>
<span class="token punctuation">}</span>
<span class="token keyword">def</span> <span class="token function">trans</span><span class="token punctuation">(</span>nt<span class="token punctuation">,</span>seq<span class="token punctuation">)</span><span class="token punctuation">:</span>
    seq<span class="token operator">=</span>seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#序列反转</span>
    nseq<span class="token operator">=</span><span class="token string">&quot;&quot;</span>
    <span class="token keyword">for</span> s <span class="token keyword">in</span> seq<span class="token punctuation">:</span>
        nseq <span class="token operator">=</span> nseq <span class="token operator">+</span> nt<span class="token punctuation">[</span>s<span class="token punctuation">]</span>
    <span class="token keyword">return</span> nseq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后成型的程序：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#get_seq.py</span>
<span class="token keyword">def</span> <span class="token function">trans</span><span class="token punctuation">(</span>nt<span class="token punctuation">,</span>seq<span class="token punctuation">)</span><span class="token punctuation">:</span>
    seq<span class="token operator">=</span>seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    nseq<span class="token operator">=</span><span class="token string">&quot;&quot;</span>
    <span class="token keyword">for</span> s <span class="token keyword">in</span> seq<span class="token punctuation">:</span>
        nseq <span class="token operator">=</span> nseq <span class="token operator">+</span> nt<span class="token punctuation">[</span>s<span class="token punctuation">]</span>
    <span class="token keyword">return</span> nseq

<span class="token keyword">def</span> <span class="token function">getSeq</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>tlen<span class="token punctuation">,</span>lenline<span class="token punctuation">,</span>beg<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sbeg<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>beg<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>lenline<span class="token punctuation">)</span>
    send<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>lenline<span class="token punctuation">)</span><span class="token operator">-</span>sbeg
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>tlen<span class="token operator">+</span>beg<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>sbeg<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>end<span class="token operator">-</span>beg<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>send<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    nt<span class="token operator">=</span><span class="token punctuation">{</span>
        <span class="token string">&quot;A&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;t&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;t&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;g&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;g&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;n&quot;</span>
    <span class="token punctuation">}</span>
    f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
    titleLen<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    lenline<span class="token operator">=</span><span class="token number">10</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.gff&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fgff<span class="token punctuation">:</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> fgff<span class="token punctuation">:</span>
            tmp<span class="token operator">=</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span>getSeq<span class="token punctuation">(</span>f<span class="token punctuation">,</span>titleLen<span class="token punctuation">,</span>lenline<span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span>trans<span class="token punctuation">(</span>nt<span class="token punctuation">,</span>getSeq<span class="token punctuation">(</span>f<span class="token punctuation">,</span>titleLen<span class="token punctuation">,</span>lenline<span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单元测试为：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> unittest
<span class="token keyword">from</span> get_seq <span class="token keyword">import</span> getSeq<span class="token punctuation">,</span>trans


<span class="token keyword">class</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
    titleLen<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    lenline<span class="token operator">=</span><span class="token number">10</span>

    <span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        beg<span class="token operator">=</span><span class="token number">4</span>
        end<span class="token operator">=</span><span class="token number">7</span>
        targetSeq<span class="token operator">=</span><span class="token string">&quot;CCCG&quot;</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>getSeq<span class="token punctuation">(</span>self<span class="token punctuation">.</span>f<span class="token punctuation">,</span>self<span class="token punctuation">.</span>titleLen<span class="token punctuation">,</span>self<span class="token punctuation">.</span>lenline<span class="token punctuation">,</span>beg<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">,</span>targetSeq<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        beg<span class="token operator">=</span><span class="token number">20</span>
        end<span class="token operator">=</span><span class="token number">22</span>
        targetSeq<span class="token operator">=</span><span class="token string">&quot;CCG&quot;</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>getSeq<span class="token punctuation">(</span>self<span class="token punctuation">.</span>f<span class="token punctuation">,</span>self<span class="token punctuation">.</span>titleLen<span class="token punctuation">,</span>self<span class="token punctuation">.</span>lenline<span class="token punctuation">,</span>beg<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">,</span>targetSeq<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        nt<span class="token operator">=</span><span class="token punctuation">{</span>
            <span class="token string">&quot;A&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;t&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;t&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;g&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;g&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;n&quot;</span>
        <span class="token punctuation">}</span>
        seq<span class="token operator">=</span><span class="token string">&quot;AATCG&quot;</span>
        targetSeq<span class="token operator">=</span><span class="token string">&quot;CGATT&quot;</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>trans<span class="token punctuation">(</span>nt<span class="token punctuation">,</span>seq<span class="token punctuation">)</span><span class="token punctuation">,</span>targetSeq<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic.atlasbioinfo.com/logo.png" alt="博主简介" tabindex="0" loading="lazy"><figcaption>博主简介</figcaption></figure>`,8);function d(v,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",r,[c("Python3官方api——Unittest"),l(a)])]),k])}const q=t(i,[["render",d],["__file","20200620.html.vue"]]),f=JSON.parse('{"path":"/posts/Python/20200620.html","title":"生信中的python——从基因组中提目标序列","lang":"zh-CN","frontmatter":{"icon":"print","date":"2020-06-20T00:00:00.000Z","title":"生信中的python——从基因组中提目标序列","categories":["Python"],"description":"昨天组会后，和同门讲起曾经我刚进实验室的辛酸历程。2G内存的小服务器，硬是让我做人类基因组数据，于是写程序必须各种优化还得注意控制内存。所以有了今天的想法，聊聊怎么从基因组中提序列。实现的功能不重要，主要是讲一下怎么处理大文件，真正提序列可以用samtools等现有软件，不用重复造轮子。 问题描述 读取大文件 从简单的开始 Unittest单元测试 写...","head":[["meta",{"property":"og:url","content":"https://blog.atlasbioinfo.com/posts/Python/20200620.html"}],["meta",{"property":"og:site_name","content":"ATLAS生物信息博客"}],["meta",{"property":"og:title","content":"生信中的python——从基因组中提目标序列"}],["meta",{"property":"og:description","content":"昨天组会后，和同门讲起曾经我刚进实验室的辛酸历程。2G内存的小服务器，硬是让我做人类基因组数据，于是写程序必须各种优化还得注意控制内存。所以有了今天的想法，聊聊怎么从基因组中提序列。实现的功能不重要，主要是讲一下怎么处理大文件，真正提序列可以用samtools等现有软件，不用重复造轮子。 问题描述 读取大文件 从简单的开始 Unittest单元测试 写..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic.atlasbioinfo.com/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-24T16:07:31.000Z"}],["meta",{"property":"article:author","content":"Haopeng Yu"}],["meta",{"property":"article:published_time","content":"2020-06-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-24T16:07:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生信中的python——从基因组中提目标序列\\",\\"image\\":[\\"https://pic.atlasbioinfo.com/logo.png\\"],\\"datePublished\\":\\"2020-06-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-24T16:07:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Haopeng Yu\\",\\"url\\":\\"https://github.com/atlasbioinfo\\"}]}"]]},"headers":[{"level":2,"title":"1. 问题描述","slug":"_1-问题描述","link":"#_1-问题描述","children":[]},{"level":2,"title":"2. 处理大文件的特定行","slug":"_2-处理大文件的特定行","link":"#_2-处理大文件的特定行","children":[]},{"level":2,"title":"3. 从简单的开始","slug":"_3-从简单的开始","link":"#_3-从简单的开始","children":[]},{"level":2,"title":"4. Unittest单元测试","slug":"_4-unittest单元测试","link":"#_4-unittest单元测试","children":[]}],"git":{"createdTime":1710932686000,"updatedTime":1711296451000,"contributors":[{"name":"hyu","email":"hp.yu@outlook.com","commits":2}]},"readingTime":{"minutes":7.64,"words":2292},"filePathRelative":"posts/Python/20200620.md","localizedDate":"2020年6月20日","excerpt":"<p>昨天组会后，和同门讲起曾经我刚进实验室的辛酸历程。2G内存的小服务器，硬是让我做人类基因组数据，于是写程序必须各种优化还得注意控制内存。所以有了今天的想法，聊聊怎么从基因组中提序列。实现的功能不重要，主要是讲一下怎么处理大文件，真正提序列可以用samtools等现有软件，不用重复造轮子。</p>\\n<blockquote>\\n<ul>\\n<li>问题描述</li>\\n<li>读取大文件</li>\\n<li>从简单的开始</li>\\n<li>Unittest单元测试</li>\\n</ul>\\n</blockquote>\\n<hr>\\n<p>写在前面：</p>\\n<p>有人给我打赏了！！！！</p>\\n<p>感谢感谢，希望我的内容对你们有帮助。我平时忙起来特别忙，闲起来特别闲=-=，如果有几个小时的空闲与其看个电影不如写写博客，自己也能学习一下。</p>","autoDesc":true}');export{q as comp,f as data};
