import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as l,a as n,f as a,b as t,e as i}from"./app-B1UaDH9J.js";const c={},u=n("p",null,"马上快毕业了，师妹跟我聊说她现在程序还是不太会写，让我在撤退之前给她补救一下；同时，老婆大人突然励志要奋发努力的学程序，所以我准备推出一系列生信代码教程。主要是通过一些示例，写一下我写生信程序的思路和经验，并不包括具体的语法。第一个就写一个有关polyN定位的例子，示例来自于已经工作的孟师妹问我的一个问题，在此与大家分享。",-1),r=n("blockquote",null,[n("ul",null,[n("li",null,"生信案例描述"),n("li",null,"最直接的解决方案"),n("li",null,"适用于更多情况")])],-1),d=n("hr",null,null,-1),k=n("p",null,"写在前面：",-1),m=n("p",null,"我并不想把python的语法或者什么再重复一遍，没有任何意义。现在描述python基本语法的教学网站很多，我推荐几个吧：",-1),v={href:"https://docs.python.org/zh-cn/3.6/library/index.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.liaoxuefeng.com/wiki/1016959663602400",target:"_blank",rel:"noopener noreferrer"},g=i(`<p>上面两个通常就够用了。不过一般如果语法忘了，大家可以直接搜，搜索引擎也是IDE嘛。</p><h2 id="_1-生信案例描述" tabindex="-1"><a class="header-anchor" href="#_1-生信案例描述"><span>1. 生信案例描述</span></a></h2><p>故事是这样的：</p><p>已经工作的孟师妹突然给我发消息，说有一个task她的程序跑的特别慢，由于公司需要效率，所以问我能不能优化一下程序。</p><p>场景是这样的：</p><p>她有一个基因组的fasta文件，里面包含poly N序列，现在需要把这些序列定位出来生成一个类似gff的表。</p><p>fasta示例文件如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&gt;chr1
AACGNNNNACGTAC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，就应该生成</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#label  Chr     Beg End
polyN   chr1    5   8   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>简单吧，那么，游戏开始~</p><hr><p>注意，我非常建议你先自己想一下怎么解决这个问题，写好代码再继续看下一节。这样收获更大。 同理，每一节我还会提出问题，建议还是先完成相应的代码，再看下一节。</p><hr><h2 id="_2-最直接的解决方案" tabindex="-1"><a class="header-anchor" href="#_2-最直接的解决方案"><span>2. 最直接的解决方案</span></a></h2><p>最直接的方案就是：</p><ol><li>一行一行把文件读出来</li><li>遇到“&gt;”记录一下fasta的title，序列开始计算</li><li>把序列一个个读出来，看是不是“N”，如果是记录开始位置，直到不是N时输出。</li></ol><p>这样就出现了下面的代码：</p><p>首先先建立一个叫test.fa的文件保存序列，内容为：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&gt;chr1
AACGNNNNACGTAC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>之后写个python</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;#label\\tChr\\tBeg\\tEnd&quot;</span><span class="token punctuation">)</span>

f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token comment">#开文件</span>
lines<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#按照行读取，保存在名为lines的list里面</span>
<span class="token comment">#lines[0]是大于号的那行，把大于号后面的内容输出,strip()去换行符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;polyN\\t&quot;</span><span class="token operator">+</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>

<span class="token comment">#之后需要处理序列那行，设置一个小标签jump，防止重复输出</span>
<span class="token comment">#0代表false，&gt;0为true。</span>
<span class="token comment">#按理说赋值数字就行，为了方便理解，我先用true和false代替</span>
jump<span class="token operator">=</span><span class="token boolean">True</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#把每一个碱基拉过来遍历</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;N&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#如果是N，记录位置</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>jump<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#第一次遇到N，为true，记录位置；之后为false，不再记录</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token comment">#记录开始位置</span>
            jump<span class="token operator">=</span><span class="token boolean">False</span> <span class="token comment">#以后在上面的jump判断中不再通过，不再重复输出起始位置</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> jump<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 如果这个碱基不是N，并且已经开始记录N位置了(jump为False)</span>
                        <span class="token comment"># 那么，not jump为true，记录一下结束位置。</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>                
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像预期，输出和上面示例输出一模一样：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#label  Chr     Beg     End
polyN   chr1    5       8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>评价一下上面的代码。</p><p>上面内容有一个小技巧就是jump，因为遇到第一个N需要记录起始位置，直到第一个非N位点记录终止位置。</p><p>不过，这个代码已经知道了需要读取的文件有2行，第一行为名字，第二行为序列，且只有一段polyN，所以相当于针对于这个数据“定制的”代码。</p><p>这段代码可以说&quot;泛化&quot;极弱，换个fasta数据立刻报错。不过我写这个教程的时候并没有把这个最简单的程序这个省去，因为这也是我写程序的思路之一。</p><blockquote><p>Atlas编程哲学：不要浪费时间在没有用的考虑上，一切都是为了最快的获得正确的结果。</p></blockquote><blockquote><p>如果某个task以后应用的场景极低，可以认为是一次性代码，用完就扔，那么就忘记“泛化”，最快速度达到目的才是最重要的。</p></blockquote><blockquote><p>也就是说：如果你需要在这个test.fa后面再加点序列，直接打开编辑器加就行了，不需要写一个通用的文档追加程序，完善所有功能，做成一个产品，或者自己开发个编辑器啥的......</p></blockquote><h2 id="_3-适用于更多情况" tabindex="-1"><a class="header-anchor" href="#_3-适用于更多情况"><span>3. 适用于更多情况</span></a></h2><p>上一个程序的弊端在于，只能处理2行的，只有一段polyN的序列。真正的polyN序列往往很多段，fasta文件也有很多行，很多染色体，于是上面的程序就用不了了。</p><h3 id="_3-1-支持多染色体和多段polyn" tabindex="-1"><a class="header-anchor" href="#_3-1-支持多染色体和多段polyn"><span>3.1 支持多染色体和多段polyN</span></a></h3><p>所以首先需要增加的功能就是：</p><ul><li>支持多个染色体在一个fasta中的情况</li><li>支持多段polyN</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;#label\\tChr\\tBeg\\tEnd&quot;</span><span class="token punctuation">)</span> <span class="token comment">#打印title</span>

f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token comment">#开文件</span>
lines<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#按照行读取，保存在名为lines的list里面</span>
chrname<span class="token operator">=</span><span class="token string">&quot;&quot;</span> <span class="token comment">#设个变量记录染色体名字</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span> 
    line<span class="token operator">=</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#去除一下末尾的换行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#如果line的第一个是&quot;&gt;&quot;</span>
        chrname<span class="token operator">=</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">#记录一下染色体名字</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        beg<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token comment">#首先设置一个叫beg的标签，记录起始坐标</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#把每一个碱基拉过来遍历</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;N&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#如果是N，记录位置</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>beg <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    beg<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment">#如果不是N，且beg已经开始记录了，那么输出前一个位置</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>beg<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;polyN\\t&quot;</span><span class="token operator">+</span>chrname<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>beg<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    beg<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment">#最后，beg初始化，赋值-1进入下一轮循环</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上段代码输出为：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#label  Chr     Beg     End
polyN   chr1    5       8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>woo，和期望结果的一模一样。</p><p>同时，如果我们弄得稍微复杂点，有2段polyN，上面这段代码也是OK的。比如，test.fa改成：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&gt;chr1
AACGNNNNACGTNNNNACGTA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>则输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#label  Chr     Beg     End
polyN   chr1    5       8
polyN   chr1    13      16
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多染色体也OK，test.fa修改成：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&gt;chr1
AACGNNNNACGTNNNNACGTA
&gt;chr2
AACGNNNNACGTNNNNACGTA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#label  Chr     Beg     End
polyN   chr1    5       8
polyN   chr1    13      16
polyN   chr2    5       8
polyN   chr2    13      16
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，如果fasta序列是这样的：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&gt;chr1
AACGNNNNACGTNNNNACGTA
AACGNNNNACGTNNNNACGTA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>额，输出是：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#label  Chr     Beg     End
polyN   chr1    5       8
polyN   chr1    13      16
polyN   chr1    5       8
polyN   chr1    13      16
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是程序目前只能处理单行fasta，无法多行，所以需要进一步修改。</p><h3 id="_3-2-支持多行" tabindex="-1"><a class="header-anchor" href="#_3-2-支持多行"><span>3.2 支持多行</span></a></h3><p>多行，首先想到的是需要一个变量记录每行的长度，定位的位置加上这个长度不就行了。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>pos<span class="token operator">=</span><span class="token number">0</span> <span class="token comment"># for循环前定义一个pos变量</span>

    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">#省略代码</span>
        beg <span class="token operator">=</span> pos <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">#省略代码</span>
    pos <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token comment">#最后一行加这个</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#label  Chr     Beg     End
polyN   chr1    5       8
polyN   chr1    13      16
polyN   chr1    26      29
polyN   chr1    34      37
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这下正常了，不过别急，如果换行呢？比如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&gt;chr1
ACTAGCATCGTACNNN
NNNACGTACGTACGTA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#label  Chr     Beg     End
polyN   chr1    17      19
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一行直接掠过去了（由于没有非N作为阻断），直接记录第二行，位置倒是对的。</p><p>所以，现在我们有2个策略：</p><ol><li>把多行fasta首先转换成单行fasta，直接用前面的代码就行。</li><li>想出一个多行的策略解决这种情况</li></ol><p>那么，应该用哪个方案呢？</p><blockquote><p>Atlas编程哲学：在边界内效率最大化。</p></blockquote><p>软件工程师，为啥叫工程师而不是软件科学家？因为工程师需要考虑到实际情况，而不是所有研究全部处于理论状态。</p><p>对于写代码，需要考虑的就是能用的内存、硬盘空间和CPU，以及代码运行起来的时间复杂度和空间复杂度。</p><p>也就是说：</p><ul><li>如果我所需要处理的情况，就是上面那个示例文件，我就直接肉眼数出来就行，也别写代码了。</li><li>如果我需要处理较大的染色体，而内存可以塞下，那么我就采用方案1，简单粗暴，多行变一行，直接解决。</li><li>如果我内存不够，我就需要采用方案2，修改策略，单行处理。</li></ul><p>对于其他情况，通常还需要考虑自己的硬件优势</p><ul><li>如果处理很多基因组，而我的优势的多CPU，就需要对文件进行拆分进行多进程处理；或者写多线程进行处理。</li><li>如果优势是大硬盘，劣势是小内存，那么要么一点一点处理，要么把内存的东西先写到硬盘，一步一步处理。</li></ul><p>总的来说，写程序并不是黑写，需要像工程师那样考虑实际情况进行效率最大化的优化，可能在不同场景需要不同的处理策略。当然，如果硬件很好，大内存，大硬盘，主频高核还多的CPU，就可以任性，想怎么写就怎么写。</p><p>回到主题，我倾向于写多行的策略，适用范围广还挑战一下自己；不过如果平时着急出结果的代码，我会用方案1尽快出结果。</p><p>其实，改起来很简单，把beg往外圈放就好了：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;#label\\tChr\\tBeg\\tEnd&quot;</span><span class="token punctuation">)</span> 

f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.fa&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> 
lines<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> 
chrname<span class="token operator">=</span><span class="token string">&quot;&quot;</span> 
pos<span class="token operator">=</span><span class="token number">0</span>
beg<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token comment">#把beg移动到这个位置</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span> 
    line<span class="token operator">=</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        chrname<span class="token operator">=</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> 
        beg <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment"># 这里还需要再初始化一下，重置一下beg和pos</span>
        pos<span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;N&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
                <span class="token keyword">if</span> <span class="token punctuation">(</span>beg <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    beg<span class="token operator">=</span>pos<span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span> 
                <span class="token keyword">if</span> <span class="token punctuation">(</span>beg<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;polyN\\t&quot;</span><span class="token operator">+</span>chrname<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>beg<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">+</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    beg<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> 
        pos <span class="token operator">=</span> pos <span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>beg<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;polyN\\t&quot;</span><span class="token operator">+</span>chrname<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>beg<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#如果末尾有polyN再输出一下</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试test.fa:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&gt;chr1
AACGNNNNACGTNNNNACGTA
ACTAGCATCGTACNNN
NNNACGTACGTACGTA
&gt;chr2
ACTAGCATCGTACNNN
NNNACGTACGTACNNN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#label  Chr     Beg     End
polyN   chr1    5       8
polyN   chr1    13      16
polyN   chr1    35      40
polyN   chr2    14      19
polyN   chr2    30      32
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个程序写好了，简单示例已经可以获得正确的结果，那么就可以上大基因组了。那么这时候，下一个问题就出现了。</p><h2 id="_4-时间" tabindex="-1"><a class="header-anchor" href="#_4-时间"><span>4. 时间！！！</span></a></h2><p>一段代码的复杂度在各种算法课本中可以查到，不过我这里并不想讲怎么计算这个复杂度。如果用上面这段代码去跑大基因组，那么有一个问题就会出现，程序需要跑多久？</p><p>最简单的方法就是，跑一遍不就知道多久了？所以一般比如要跑10G的数据，可以先拿10M或者100M的数据跑一遍，最后耗时按照比例增加就行了。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">time</span> 你的代码.py 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>耗时需要看自己的承受能力。比如10min，1h，1day，1week等等，按照自己接受能力去优化代码。如果已经估计出来的时间可以接受，并且以后这段代码不会再用，那么就没有优化的必要。比如耗时需要1天，但是我可能通过优化可以变成半天，然鹅我可以去聚聚餐，打打球，明天这时候直接收结果就行了，为啥要优化？</p><p>不过，如果估计出来的1week或者更长，自己肯定无法接受，那么就要想办法进行优化。</p><p>我采用的优化策略一般有以下2种：</p><blockquote><ol><li>用更多的资源</li></ol><blockquote><p>包括原来用一台电脑跑一周，我开7台电脑跑一天就好了啊~或者是原来是单核的程序，可用的cpu有20核，我分上18个文件，同时跑18个不就更快；如果资源需要共享啊，交互啊什么的，可以写多线程（不过线程锁、线程间的共享似乎是个坑）</p></blockquote><ol start="2"><li>优化算法</li></ol></blockquote><p>第一种就不说了，第二种深有体会。</p><h3 id="_4-1-算法的优化" tabindex="-1"><a class="header-anchor" href="#_4-1-算法的优化"><span>4.1 算法的优化</span></a></h3><p>算法优化很容易就可以有量级级别的提升。</p><p>故事开始：</p><blockquote><p>我记得最清楚的是，我刚进实验室时，师兄F需要做1000w个数无重复依次抽取100w个数，他rand(1000w)后，抽一个就和抽出来的判断一下是否抽重了，如果重了重新抽，于是这段代码写出来越来越慢直至卡死；之后我生成1000w的数组，之后从里面抽一个删一个（当时想的是从口袋中抽球），估计4-6小时可以跑完；最后，我师兄M通过数组元素交换的方法，写的程序3秒跑完。这次对我印象太深刻了，好的算法真的可以带来量级上的提升。</p></blockquote><p>我现在一般用到的算法优化策略有以下几种：</p><ol><li>避免循环嵌套。</li><li>避免不必要的资源浪费。比如多余的变量，多余的数组和链表等。部分编程语言有较好的垃圾回收机制可以避免这种内存占用，不过我还是习惯清空不用数组，关闭打开的文件等减少内存占用。</li><li>数组利于按index查询不利于遍历搜索和增删，链表利于增删不利于遍历，哈希键值查询极快等。利用各种数据结构的优势进行代码编写。</li><li>引用我大学的计算机老师勇哥的话：“人想的多，计算机运算就快”。比如1到10亿的加和可以遍历求和也可以直接用高斯的等差数列公式，很明显后者快。</li><li>尽量把大程序拆成小块，小的子程序，这样也比较容易写单元测试。</li><li>字符串查询上，通常正则表达式要快=-=</li><li>linux比Win快=-=</li><li>linux上用shell比Perl和Python快=-=</li></ol><p>那么，对于上面我们写的这个算法，我试了一下我的电脑上567M的fasta需要跑1m12s。可能这个属于我前面说的无需优化的类型，接杯水回来就跑完了。</p><p>然鹅，如果需要跑1T的数据，就需要36.9小时，一天半。所以，按照上面的策略5，我们试试正则表达式。</p><h3 id="_4-2-上-正则表达式" tabindex="-1"><a class="header-anchor" href="#_4-2-上-正则表达式"><span>4.2 上，正则表达式！</span></a></h3><p>最早孟师妹问我的时候，她采用的代码就是前面我说的（我估计是的，因为是通常的思路就是这样的），她觉得太慢了。</p><p>于是我第一反应就是，既然是匹配，那么上正则表达式呗。不过前提条件就是，需要内存足够大，序列需要放一行。如果是多行fasta正则表达式匹配，遇到3中提到的多行的问题还不够麻烦的=-=，效率也不见得能提高多少。</p><p>所以，孟师妹修改后的代码:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;#label\\tChr\\tBeg\\tEnd&quot;</span><span class="token punctuation">)</span> 
<span class="token comment">#这里直接采用孟师妹的函数，把fasta的名那行变为偶数行，序列变为奇数行，首行为空</span>
<span class="token keyword">def</span> <span class="token function">ToSingle</span><span class="token punctuation">(</span>fasta_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    str_my <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fasta_file<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#文件全部读到内存</span>
    first_res <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;(&gt;.*)\\n&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;@\\1@&#39;</span><span class="token punctuation">,</span> str_my<span class="token punctuation">)</span> <span class="token comment">#正则表达式替换，把开头有&gt;也就是标题行用两个@包围</span>
    sec_res <span class="token operator">=</span> first_res<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">#去除全部换行符（这里其实没考虑到windows的\\r）</span>
    res <span class="token operator">=</span> sec_res<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token comment">#把刚才标记的@变成换行</span>
    <span class="token keyword">return</span> res

file_arr <span class="token operator">=</span> ToSingle<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span> <span class="token comment">#用\\n分割文件,生成数组</span>
reg <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;N+&#39;</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token comment">#编译正则表达式，多个N，忽略大小写</span>
chrom <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
<span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>file_arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        chrom <span class="token operator">=</span> file_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">#获得染色体名</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> sub_str <span class="token keyword">in</span> reg<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>file_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            start<span class="token punctuation">,</span> end <span class="token operator">=</span> sub_str<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span>
            start <span class="token operator">=</span> start<span class="token operator">+</span><span class="token number">1</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;polyN\\t</span><span class="token interpolation"><span class="token punctuation">{</span>chrom<span class="token punctuation">}</span></span><span class="token string">\\t</span><span class="token interpolation"><span class="token punctuation">{</span>start<span class="token punctuation">}</span></span><span class="token string">\\t</span><span class="token interpolation"><span class="token punctuation">{</span>end<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">#3.6新增的格式化输出方式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我再运行刚才567Mfasta，只用了15s，提高了4.8倍。1T数据时间可以从36.9小时减少到7.7小时。</p><p>最后思考，如果一行序列内存放不下怎么办？ 分多行？之后再判断切割位点附近序列有没有polyN？</p><p>所以，可以看到，写程序也有这个特点，有钱有资源就可以少折腾，233333。</p><h2 id="_5-应用性和泛性" tabindex="-1"><a class="header-anchor" href="#_5-应用性和泛性"><span>5. 应用性和泛性</span></a></h2><p>既然我们已经得到了一个差不多高效的程序了，还需要做什么？</p><p>当然是整理好代码以后还可以继续用啊。也就是这个程序要适应各种不同的情况，而不只是test.fa。此外，如果其他人也想用这个软件，他们没亲自编写程序，于是就有可能犯各种各样的错误。</p><p>所以，我通常的做法就是，把上面的算法“打包”，也就是认为“找polyA”是一个箱子，只要输入fasta文件，他就能输出polyN的位置。那么，我就需要把fasta文件给这个箱子而不是给个gbk的文件。</p><p>那么，就需要用到：</p><ol><li>显示文件用法readme，设置参数的包：argparse, sys.argv</li><li>Biopython里面完善的读fasta文件的包: SeqIO</li></ol><p>等。这里我就不再给出具体的代码了。</p><p>当然，如果想让程序更易用，也可以加入更多的功能。比如有人需要获得&quot;非polyN&quot;序列的位置，也就是把正则表达式编译那里的</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    reg <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;[^N]+&#39;</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
    <span class="token comment">#不过这里匹配非N，也许数字或者其他奇奇怪怪的也会进来哦。</span>
    <span class="token comment">#所以需要输入数据有质控。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等等，会有很多很多需要完善的功能，而在你完善的过程中，你的程序能力就会飞速的提升。</p><p>好啦，今天这个例子就到这里，总结一下。</p><p>这个例子主要说了我写程序的一些思路和优化经验，并展示了正则表达式。</p><p>希望大家有所收获，欢迎与我交流。</p><figure><img src="https://pic.atlasbioinfo.com/logo.png" alt="博主简介" tabindex="0" loading="lazy"><figcaption>博主简介</figcaption></figure>`,121);function h(y,N){const s=p("ExternalLinkIcon");return o(),l("div",null,[u,r,d,k,m,n("ul",null,[n("li",null,[n("a",v,[a("Python3.6官方API——中文版"),t(s)])]),n("li",null,[n("a",b,[a("廖雪峰的Python教程"),t(s)])])]),g])}const _=e(c,[["render",h],["__file","20200605.html.vue"]]),q=JSON.parse('{"path":"/posts/Python/20200605.html","title":"生信中的Python——定位polyN","lang":"zh-CN","frontmatter":{"icon":"python","date":"2020-06-06T00:00:00.000Z","title":"生信中的Python——定位polyN","categories":["Python"],"description":"马上快毕业了，师妹跟我聊说她现在程序还是不太会写，让我在撤退之前给她补救一下；同时，老婆大人突然励志要奋发努力的学程序，所以我准备推出一系列生信代码教程。主要是通过一些示例，写一下我写生信程序的思路和经验，并不包括具体的语法。第一个就写一个有关polyN定位的例子，示例来自于已经工作的孟师妹问我的一个问题，在此与大家分享。 生信案例描述 最直接的解决方...","head":[["meta",{"property":"og:url","content":"https://blog.atlasbioinfo.com/posts/Python/20200605.html"}],["meta",{"property":"og:site_name","content":"ATLAS生物信息博客"}],["meta",{"property":"og:title","content":"生信中的Python——定位polyN"}],["meta",{"property":"og:description","content":"马上快毕业了，师妹跟我聊说她现在程序还是不太会写，让我在撤退之前给她补救一下；同时，老婆大人突然励志要奋发努力的学程序，所以我准备推出一系列生信代码教程。主要是通过一些示例，写一下我写生信程序的思路和经验，并不包括具体的语法。第一个就写一个有关polyN定位的例子，示例来自于已经工作的孟师妹问我的一个问题，在此与大家分享。 生信案例描述 最直接的解决方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic.atlasbioinfo.com/logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T11:04:46.000Z"}],["meta",{"property":"article:author","content":"Haopeng Yu"}],["meta",{"property":"article:published_time","content":"2020-06-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-20T11:04:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生信中的Python——定位polyN\\",\\"image\\":[\\"https://pic.atlasbioinfo.com/logo.png\\"],\\"datePublished\\":\\"2020-06-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-20T11:04:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Haopeng Yu\\",\\"url\\":\\"https://github.com/atlasbioinfo\\"}]}"]]},"headers":[{"level":2,"title":"1. 生信案例描述","slug":"_1-生信案例描述","link":"#_1-生信案例描述","children":[]},{"level":2,"title":"2. 最直接的解决方案","slug":"_2-最直接的解决方案","link":"#_2-最直接的解决方案","children":[]},{"level":2,"title":"3. 适用于更多情况","slug":"_3-适用于更多情况","link":"#_3-适用于更多情况","children":[{"level":3,"title":"3.1 支持多染色体和多段polyN","slug":"_3-1-支持多染色体和多段polyn","link":"#_3-1-支持多染色体和多段polyn","children":[]},{"level":3,"title":"3.2 支持多行","slug":"_3-2-支持多行","link":"#_3-2-支持多行","children":[]}]},{"level":2,"title":"4. 时间！！！","slug":"_4-时间","link":"#_4-时间","children":[{"level":3,"title":"4.1 算法的优化","slug":"_4-1-算法的优化","link":"#_4-1-算法的优化","children":[]},{"level":3,"title":"4.2 上，正则表达式！","slug":"_4-2-上-正则表达式","link":"#_4-2-上-正则表达式","children":[]}]},{"level":2,"title":"5. 应用性和泛性","slug":"_5-应用性和泛性","link":"#_5-应用性和泛性","children":[]}],"git":{"createdTime":1710932686000,"updatedTime":1710932686000,"contributors":[{"name":"hyu","email":"hp.yu@outlook.com","commits":1}]},"readingTime":{"minutes":15.06,"words":4518},"filePathRelative":"posts/Python/20200605.md","localizedDate":"2020年6月6日","excerpt":"<p>马上快毕业了，师妹跟我聊说她现在程序还是不太会写，让我在撤退之前给她补救一下；同时，老婆大人突然励志要奋发努力的学程序，所以我准备推出一系列生信代码教程。主要是通过一些示例，写一下我写生信程序的思路和经验，并不包括具体的语法。第一个就写一个有关polyN定位的例子，示例来自于已经工作的孟师妹问我的一个问题，在此与大家分享。</p>\\n<blockquote>\\n<ul>\\n<li>生信案例描述</li>\\n<li>最直接的解决方案</li>\\n<li>适用于更多情况</li>\\n</ul>\\n</blockquote>\\n<hr>\\n<p>写在前面：</p>\\n<p>我并不想把python的语法或者什么再重复一遍，没有任何意义。现在描述python基本语法的教学网站很多，我推荐几个吧：</p>","autoDesc":true}');export{_ as comp,q as data};
